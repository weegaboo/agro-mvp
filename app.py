import os, json, time
from typing import List, Dict, Any
import streamlit as st
from streamlit_folium import st_folium
import folium

st.set_page_config(page_title="AgroRoute MVP ‚Äî Week 1", layout="wide")
st.title("AgroRoute")

# --------- SIDEBAR: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–º–æ–ª—ë—Ç–∞ + —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º ----------
with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–º–æ–ª—ë—Ç–∞")
    spray_width_m = st.number_input("–®–∏—Ä–∏–Ω–∞ –∑–∞—Ö–≤–∞—Ç–∞ (–º)", 1.0, 100.0, 20.0, 1.0)
    turn_radius_m = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ (–º)", 5.0, 500.0, 50.0, 5.0)

    st.divider()
    st.header("–ü—Ä–æ–µ–∫—Ç")
    os.makedirs("data/projects", exist_ok=True)
    project_name = st.text_input("–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞", "demo")
    project_file = f"data/projects/{project_name}.json"

    col_a, col_b = st.columns(2)
    with col_a:
        save_btn = st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", use_container_width=True)
    with col_b:
        load_btn = st.button("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", use_container_width=True)

# --------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã ----------
center = [55.75, 37.61]  # –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–¥ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω
m = folium.Map(location=center, zoom_start=12, control_scale=True)
draw = folium.plugins.Draw(
    draw_options={
        "polyline": True,   # –í–ü–ü –∫–∞–∫ –ª–∏–Ω–∏—è
        "polygon": True,    # –ü–æ–ª–µ –∏ NFZ
        "marker": True,     # –°—Ç–∞—Ä—Ç
        "rectangle": False,
        "circle": False,
        "circlemarker": False,
    },
    edit_options={"edit": True, "remove": True},
)
draw.add_to(m)

# --------- –†–µ–Ω–¥–µ—Ä –∏ —Å–±–æ—Ä –≥–µ–æ–º–µ—Ç—Ä–∏–π –∏–∑ —Ä–∏—Å–æ–≤–∞–ª–∫–∏ ----------
out = st_folium(
    m, width="100%", height=600,
    returned_objects=["all_drawings", "last_active_drawing"]
)

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–±–æ—Ä–∞
def split_drawings(drawings: List[Dict[str, Any]]):
    field = None
    runway_line = None
    start_pt = None
    nfz_list = []
    for feat in drawings or []:
        g = feat.get("geometry", {})
        gtype = g.get("type")
        if gtype == "Polygon":
            # –ø–µ—Ä–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω —Å—á–∏—Ç–∞–µ–º –ø–æ–ª–µ–º, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî NFZ
            if field is None:
                field = g
            else:
                nfz_list.append(g)
        elif gtype == "LineString":
            runway_line = g
        elif gtype == "Point":
            start_pt = g
    return field, runway_line, start_pt, nfz_list

drawings = out.get("all_drawings", [])
field_gj, runway_gj, start_gj, nfz_gj_list = split_drawings(drawings)

# --------- –°—Ç–∞—Ç—É—Å –≤–≤–æ–¥–∞ ----------
st.subheader("–°—Ç–∞—Ç—É—Å")
col1, col2, col3, col4 = st.columns(4)
col1.metric("–ü–æ–ª–µ (Polygon)", "OK" if field_gj else "‚Äî")
col2.metric("–í–ü–ü (Polyline)", "OK" if runway_gj else "‚Äî")
col3.metric("–°—Ç–∞—Ä—Ç (Marker)", "OK" if start_gj else "‚Äî")
col4.metric("NFZ (—à—Ç.)", len(nfz_gj_list))

# --------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ / –ó–∞–≥—Ä—É–∑–∫–∞ ----------
payload = {
    "timestamp": int(time.time()),
    "aircraft": {
        "spray_width_m": float(spray_width_m),
        "turn_radius_m": float(turn_radius_m),
    },
    "geoms": {
        "field": field_gj,
        "runway": runway_gj,
        "start": start_gj,
        "nfz": nfz_gj_list,
    },
}
if save_btn:
    with open(project_file, "w", encoding="utf-8") as f:
        json.dump(payload, f, ensure_ascii=False, indent=2)
    st.success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {project_file}")

if load_btn:
    if os.path.exists(project_file):
        with open(project_file, "r", encoding="utf-8") as f:
            data = json.load(f)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π JSON. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–ª–æ–∞–¥ –Ω–∞ –∫–∞—Ä—Ç—É,
        # –Ω–æ –¥–ª—è –ù–µ–¥–µ–ª–∏ 1 –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ (–∫—Ä–∏—Ç–µ—Ä–∏–π).
        st.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {project_file}")
        st.json(data)
    else:
        st.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {project_file}")

# st.caption("–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ù–µ–¥–µ–ª–∏ 1: 1) –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ä–∏—Å—É—é—Ç—Å—è –≤—Å–µ —Å–ª–æ–∏; 2) JSON —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫.")

