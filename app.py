import os, json, time, math, traceback
from typing import List, Dict, Any, Optional

import streamlit as st
from streamlit_folium import st_folium
import folium

from shapely.geometry import shape, Point, LineString, Polygon, mapping
from shapely.ops import unary_union

# –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from geo.crs import context_from_many_geojson, to_utm_geom, to_wgs_geom
from route.cover_f2c import build_cover            # –¢–ï–ü–ï–†–¨ –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–æ–ª—è ‚Äî —Ç–æ–ª—å–∫–æ F2C
from route.transit import build_transit_full       # –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–æ–ª—ë—Ç–∞/–≤–æ–∑–≤—Ä–∞—Ç–∞
from route.transit_f2c import build_transit_smooth_f2c
from metrics.estimates import estimate_mission, EstimateOptions

st.set_page_config(page_title="AgroRoute ‚Äî F2C cover", layout="wide")
st.title("AgroRoute ‚Äî —Ä–∏—Å–æ–≤–∞–Ω–∏–µ ‚Üí –°–æ—Ö—Ä–∞–Ω–∏—Ç—å ‚Üí –ü–æ—Å—Ç—Ä–æ–∏—Ç—å (F2C –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—è)")

# =============== SESSION STATE ===============
if "route" not in st.session_state:
    st.session_state["route"] = None
if "build_log" not in st.session_state:
    st.session_state["build_log"] = []

def log(msg: str):
    st.session_state["build_log"].append(msg)

def clear_log():
    st.session_state["build_log"] = []

# =============== SIDEBAR ===============
with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–º–æ–ª—ë—Ç–∞ / –ø–æ–∫—Ä—ã—Ç–∏—è")
    spray_width_m = st.number_input("–®–∏—Ä–∏–Ω–∞ –∑–∞—Ö–≤–∞—Ç–∞ (–º)", 1.0, 200.0, 20.0, 1.0)
    turn_radius_m = st.number_input("–ú–∏–Ω. —Ä–∞–¥–∏—É—Å —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ (–º)", 1.0, 500.0, 40.0, 1.0)
    headland_factor = st.slider("–ö—Ä–æ–º–∫–∞ (x —à–∏—Ä–∏–Ω—ã –∫–æ—Ä–ø—É—Å–∞)", 0.0, 8.0, 3.0, 0.5)
    route_order = st.selectbox("–ü–æ—Ä—è–¥–æ–∫ –æ–±—Ö–æ–¥–∞ —Å–≤–∞—Ç–æ–≤", ["snake", "boustro", "spiral"], index=0)
    objective = st.selectbox("–¶–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–≤–∞—Ç–æ–≤", ["swath_length", "n_swath"], index=0)
    use_cc = st.checkbox("–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –∫—Ä–∏–≤–∏–∑–Ω–∞ (DubinsCC)", True)

    st.divider()
    st.header("–ü—Ä–æ–µ–∫—Ç")
    os.makedirs("data/projects", exist_ok=True)
    project_name = st.text_input("–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞", "demo")
    project_file = f"data/projects/{project_name}.json"

    c1, c2, c3, c4 = st.columns(4)
    with c1:
        save_btn = st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True)
    with c2:
        show_btn = st.button("üìÇ –ü–æ–∫–∞–∑–∞—Ç—å JSON", use_container_width=True)
    with c3:
        build_btn = st.button("üöÄ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç (–∏–∑ —Ñ–∞–π–ª–∞)", use_container_width=True)
    with c4:
        clear_btn = st.button("üóë –û—á–∏—Å—Ç–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", use_container_width=True)

st.caption("–†–∏—Å—É–µ–º **–ø–æ–ª–µ (Polygon)**, **–í–ü–ü (Polyline)** –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ **NFZ (Polygon)**. "
           "–°–Ω–∞—á–∞–ª–∞ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª, –∑–∞—Ç–µ–º ¬´–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç¬ª ‚Äî —Ä–∞—Å—á—ë—Ç —á–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞. "
           "–ú–∞—Ä—à—Ä—É—Ç –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—è —Å—Ç—Ä–æ–∏—Ç—Å—è **—Ç–æ–ª—å–∫–æ** —á–µ—Ä–µ–∑ Fields2Cover.")

# =============== HELPERS (—Ä–∏—Å–æ–≤–∞–ª–∫–∞) ===============
def split_drawings(drawings: List[Dict[str, Any]]):
    """–ü–µ—Ä–≤—ã–π Polygon ‚Äî –ø–æ–ª–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ Polygon ‚Äî NFZ; –ø–µ—Ä–≤–∞—è LineString ‚Äî –í–ü–ü (–æ—Å—å)."""
    field = None
    runway = None
    nfz = []
    for feat in drawings or []:
        g = feat.get("geometry", {})
        t = g.get("type")
        if t == "Polygon":
            if field is None:
                field = g
            else:
                nfz.append(g)
        elif t == "LineString" and runway is None:
            runway = g
    return field, runway, nfz

def calc_runway_pose(runway_line: Dict[str, Any]):
    """–°—Ç–∞—Ä—Ç ‚Äî –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ polyline; –∫—É—Ä—Å ‚Äî –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö [0..360))."""
    if not runway_line or not runway_line.get("coordinates"):
        return None
    coords = runway_line["coordinates"]
    if len(coords) == 0:
        return None
    start_lon, start_lat = coords[0]
    heading_deg = 0.0
    if len(coords) >= 2:
        (x0, y0), (x1, y1) = coords[0], coords[1]
        heading_rad = math.atan2(y1 - y0, x1 - x0)
        heading_deg = (math.degrees(heading_rad) + 360) % 360
    return {
        "type": "Feature",
        "geometry": {"type": "Point", "coordinates": [start_lon, start_lat]},
        "properties": {"heading_deg": heading_deg}
    }

def sprayed_polygon(field_poly_m: Polygon, swaths: List[LineString], spray_width_m: float) -> Optional[Polygon]:
    """–ó–æ–Ω–∞ —É–¥–æ–±—Ä–µ–Ω–∏—è –∫–∞–∫ union –±—É—Ñ–µ—Ä–æ–≤ –ø—Ä–æ—Ö–æ–¥–æ–≤ (spray_width/2), –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π –ø–æ–ª–µ–º."""
    if not field_poly_m or field_poly_m.is_empty or not swaths:
        return None
    half = max(spray_width_m, 0.0) / 2.0
    if half <= 0.0:
        return None
    bufs = [ln.buffer(half, join_style=2, cap_style=2) for ln in swaths if ln and not ln.is_empty]
    if not bufs:
        return None
    cover = unary_union(bufs)
    sprayed = cover.intersection(field_poly_m)
    if sprayed.is_empty:
        return None
    return sprayed

# =============== –ö–ê–†–¢–ê –†–ò–°–û–í–ê–ù–ò–Ø (–≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É) ===============
center = [55.75, 37.61]
m = folium.Map(location=center, zoom_start=12, control_scale=True, tiles=None)
folium.TileLayer("OpenStreetMap", name="OSM").add_to(m)
folium.TileLayer(
    tiles="https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",
    attr="Esri", name="–°–ø—É—Ç–Ω–∏–∫ (Esri)"
).add_to(m)
folium.TileLayer(
    tiles="https://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/MapServer/tile/{z}/{y}/{x}",
    attr="Esri Labels", name="–ü–æ–¥–ø–∏—Å–∏", overlay=True, control=True, opacity=0.75
).add_to(m)

draw = folium.plugins.Draw(
    draw_options={
        "polygon":  {"shapeOptions": {"color": "green", "fillOpacity": 0.2}},
        "polyline": {"shapeOptions": {"color": "blue", "weight": 6}},
        "marker": False, "rectangle": False, "circle": False, "circlemarker": False,
    },
    edit_options={"edit": True, "remove": True},
)
draw.add_to(m)
folium.LayerControl(position="topleft", collapsed=False).add_to(m)

out = st_folium(m, width="100%", height=560, returned_objects=["all_drawings"])
drawings = out.get("all_drawings", [])
field_gj, runway_gj, nfz_gj_list = split_drawings(drawings)

# —Å—Ç–∞—Ç—É—Å –≤–≤–æ–¥–∞
st.subheader("–°—Ç–∞—Ç—É—Å –≤–≤–æ–¥–∞ (—Ç–æ, —á—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞ –∫–∞—Ä—Ç–µ)")
col1, col2, col3 = st.columns(3)
col1.metric("–ü–æ–ª–µ", "OK" if field_gj else "‚Äî")
col2.metric("–í–ü–ü", "OK" if runway_gj else "‚Äî")
col3.metric("NFZ (—à—Ç.)", len(nfz_gj_list))
if runway_gj:
    rp = calc_runway_pose(runway_gj)
    if rp:
        lat = rp["geometry"]["coordinates"][1]
        lon = rp["geometry"]["coordinates"][0]
        hdg = rp["properties"]["heading_deg"]
        st.info(f"–°—Ç–∞—Ä—Ç (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ): lat {lat:.6f}, lon {lon:.6f} ‚Ä¢ –∫—É—Ä—Å ‚âà {hdg:.1f}¬∞")

# =============== –°–û–•–†–ê–ù–ï–ù–ò–ï / –ü–†–û–°–ú–û–¢–† –§–ê–ô–õ–ê ===============
payload = {
    "timestamp": int(time.time()),
    "aircraft": {
        "spray_width_m": float(spray_width_m),
        "turn_radius_m": float(turn_radius_m),
        "headland_factor": float(headland_factor),
        "route_order": route_order,
        "objective": objective,
        "use_cc": bool(use_cc),
    },
    "geoms": {
        "field": field_gj,
        "nfz": nfz_gj_list,
        "runway_centerline": runway_gj,
        "runway_pose": calc_runway_pose(runway_gj) if runway_gj else None,
    },
}
if save_btn:
    if not field_gj or not runway_gj:
        st.error("–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç, –Ω—É–∂–Ω—ã –º–∏–Ω–∏–º—É–º –ø–æ–ª–µ (Polygon) –∏ –í–ü–ü (Polyline).")
    else:
        with open(project_file, "w", encoding="utf-8") as f:
            json.dump(payload, f, ensure_ascii=False, indent=2)
        st.success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {project_file}")

if show_btn:
    if os.path.exists(project_file):
        with open(project_file, "r", encoding="utf-8") as f:
            st.json(json.load(f))
    else:
        st.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {project_file}")

# =============== –ü–û–°–¢–†–û–ï–ù–ò–ï –ú–ê–†–®–†–£–¢–ê –ò–ó –§–ê–ô–õ–ê ===============
def build_route_from_file(project_path: str):
    clear_log()
    log(f"üü¶ –°—Ç–∞—Ä—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞: {project_path}")

    if not os.path.exists(project_path):
        log("‚ùå –§–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {project_path}")

    with open(project_path, "r", encoding="utf-8") as f:
        data = json.load(f)
    log("üì• JSON –ø—Ä–æ—á–∏—Ç–∞–Ω")

    ge = data.get("geoms", {})
    field_gj_saved = ge.get("field")
    runway_gj_saved = ge.get("runway_centerline")
    nfz_gj_saved = ge.get("nfz", []) or []
    if not field_gj_saved or not runway_gj_saved:
        log("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –ø–æ–ª—è –∏–ª–∏ –í–ü–ü")
        raise ValueError("–í —Ñ–∞–π–ª–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç –ø–æ–ª—è –∏–ª–∏ –í–ü–ü")

    # CRS –∏ –º–µ—Ç—Ä—ã
    ctx = context_from_many_geojson([field_gj_saved, runway_gj_saved, *nfz_gj_saved])
    log(f"üó∫Ô∏è CRS –≤—ã–±—Ä–∞–Ω (UTM EPSG={ctx.epsg}, –∑–æ–Ω–∞={ctx.zone}{ctx.hemisphere})")

    field_m = to_utm_geom(shape(field_gj_saved), ctx)
    runway_m = to_utm_geom(shape(runway_gj_saved), ctx)
    nfz_m = [to_utm_geom(shape(g), ctx) for g in nfz_gj_saved]
    log("üìê –ì–µ–æ–º–µ—Ç—Ä–∏–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –º–µ—Ç—Ä—ã (UTM)")

    # –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–æ–ª—è ‚Äî –¢–û–õ–¨–ö–û F2C
    ac = data.get("aircraft", {})
    spray_w = float(ac.get("spray_width_m", 20.0))
    turn_r  = float(ac.get("turn_radius_m", 40.0))
    headland_factor = float(ac.get("headland_factor", 3.0))
    objective = ac.get("objective", "swath_length")
    route_order = ac.get("route_order", "snake")
    use_cc = bool(ac.get("use_cc", True))

    log(f"üåæ F2C –ø–æ–∫—Ä—ã—Ç–∏–µ: width={spray_w}–º, Rmin={turn_r}–º, headland={headland_factor}w, "
        f"objective={objective}, order={route_order}, CC={use_cc}")

    cover = build_cover(
        field_poly_m=field_m,
        spray_width_m=spray_w,
        headland_factor=headland_factor,
        objective=objective,
        route_order=route_order,
        use_continuous_curvature=use_cc,
        min_turn_radius_m=turn_r,
    )
    log(f"‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–æ: swaths={len(cover.swaths)}, angle‚âà{cover.angle_used_deg:.1f}¬∞")

    # —Ç—Ä–∞–Ω–∑–∏—Ç—ã (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –æ–±—Ö–æ–¥–∞ NFZ)
    # --- –±—ã–ª–æ: —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –æ–±—Ö–æ–¥–∞ NFZ ---
    # trans = build_transit_full(...)

    # --- —Å—Ç–∞–ª–æ: –≥–ª–∞–¥–∫–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã —á–µ—Ä–µ–∑ F2C ---
    log("‚úàÔ∏è –°—Ç—Ä–æ–∏–º –≥–ª–∞–¥–∫–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã Dubins/DubinsCC (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π NFZ)")
    trans = build_transit_smooth_f2c(
        runway_centerline_m=runway_m,
        first_swath_m=cover.swaths[0],  # shapely LineString –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ—Å—ã
        last_swath_m=cover.swaths[-1],  # shapely LineString –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ª–æ—Å—ã
        use_cc=use_cc,
        min_turn_radius_m=turn_r,
        robot_width_m=1.5,  # –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ UI
        spray_width_m=spray_w,
        nfz_polys_m=nfz_m,
        nfz_safety_buffer_m=10.0,
        stub_len_m=8.0,
        max_stub_len_m=25.0,
    )
    log("‚úÖ –ì–ª–∞–¥–∫–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã")

    # –∑–æ–Ω–∞ —É–¥–æ–±—Ä–µ–Ω–∏—è
    sprayed_m = None
    try:
        sprayed_m = (sprayed_polygon(field_m, cover.swaths, spray_w) or None)
        log("üü• –ó–æ–Ω–∞ —É–¥–æ–±—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞")
    except Exception as e:
        log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–æ–Ω—É —É–¥–æ–±—Ä–µ–Ω–∏—è: {e}")

    # –º–µ—Ç—Ä–∏–∫–∏
    opts = EstimateOptions(
        transit_speed_ms=20.0, spray_speed_ms=15.0,
        fuel_burn_lph=8.0, fert_rate_l_per_ha=10.0,
        spray_width_m=spray_w,
    )
    est = estimate_mission(
        field_poly_m=field_m,
        swaths=cover.swaths,
        cover_path_m=cover.cover_path,
        to_field_m=trans.to_field,
        back_home_m=trans.back_home,
        opts=opts
    )
    log("üìä –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")

    # –≤ WGS –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    to_field_wgs   = to_wgs_geom(trans.to_field, ctx)
    back_home_wgs  = to_wgs_geom(trans.back_home, ctx)
    cover_path_wgs = to_wgs_geom(cover.cover_path, ctx)
    swaths_wgs     = [to_wgs_geom(s, ctx) for s in cover.swaths]
    sprayed_wgs    = to_wgs_geom(sprayed_m, ctx) if sprayed_m is not None else None
    field_wgs      = shape(field_gj_saved)  # —É–∂–µ WGS
    nfz_wgs        = [shape(g) for g in nfz_gj_saved]

    st.session_state["route"] = {
        "geo": {
            "to_field": mapping(to_field_wgs),
            "back_home": mapping(back_home_wgs),
            "cover_path": mapping(cover_path_wgs),
            "swaths": [mapping(s) for s in swaths_wgs],
            "sprayed": mapping(sprayed_wgs) if sprayed_wgs is not None else None,
            "field": mapping(field_wgs),
            "nfz": [mapping(g) for g in nfz_wgs],
        },
        "metrics": {
            "length_total_m": est.length_total_m,
            "length_transit_m": est.length_transit_m,
            "length_spray_m": est.length_spray_m,
            "time_total_min": est.time_total_min,
            "time_transit_min": est.time_transit_min,
            "time_spray_min": est.time_spray_min,
            "fuel_l": est.fuel_l,
            "fert_l": est.fert_l,
            "field_area_ha": est.field_area_ha,
            "sprayed_area_ha": est.sprayed_area_ha,
        }
    }
    log("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ session_state['route']")

if clear_btn:
    st.session_state["route"] = None
    clear_log()
    st.success("–ú–∞—Ä—à—Ä—É—Ç –æ—á–∏—â—ë–Ω.")

if build_btn:
    try:
        build_route_from_file(project_file)
        st.success("–ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω. –°–º. –∫–∞—Ä—Ç—É –∏ –ª–æ–≥–∏ –Ω–∏–∂–µ.")
    except Exception as e:
        tb = traceback.format_exc()
        log(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        log(tb)
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")

# =============== –û–¢–†–ò–°–û–í–ö–ê –ú–ê–†–®–†–£–¢–ê (–µ—Å–ª–∏ –µ—Å—Ç—å) ===============
route = st.session_state["route"]
if route:
    st.subheader("–ú–∞—Ä—à—Ä—É—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π)")
    m2 = folium.Map(location=center, zoom_start=12, control_scale=True, tiles=None)
    folium.TileLayer("OpenStreetMap", name="OSM").add_to(m2)
    folium.TileLayer(
        tiles="https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",
        attr="Esri", name="–°–ø—É—Ç–Ω–∏–∫ (Esri)"
    ).add_to(m2)
    folium.TileLayer(
        tiles="https://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/MapServer/tile/{z}/{y}/{x}",
        attr="Esri Labels", name="–ü–æ–¥–ø–∏—Å–∏", overlay=True, control=True, opacity=0.75
    ).add_to(m2)

    # —Ñ–æ–Ω: –ø–æ–ª–µ –∏ NFZ
    if route["geo"].get("field"):
        folium.GeoJson(route["geo"]["field"], name="–ü–æ–ª–µ",
                       style_function=lambda x: {"color":"#2ca02c","fillOpacity":0.1}).add_to(m2)
    for gj in route["geo"].get("nfz", []):
        folium.GeoJson(gj, name="NFZ",
                       style_function=lambda x: {"color":"#d62728","fillOpacity":0.15}).add_to(m2)

    # –∑–æ–Ω–∞ —É–¥–æ–±—Ä–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if route["geo"].get("sprayed"):
        folium.GeoJson(route["geo"]["sprayed"], name="–ó–æ–Ω–∞ —É–¥–æ–±—Ä–µ–Ω–∏—è",
                       style_function=lambda x: {"color":"#ff0000","fillOpacity":0.25}).add_to(m2)

    # –º–∞—Ä—à—Ä—É—Ç—ã
    folium.GeoJson(route["geo"]["cover_path"], name="–ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –ø–æ–ª—é",
                   style_function=lambda x: {"color":"#00aa00","weight":4}).add_to(m2)
    folium.GeoJson(route["geo"]["to_field"],  name="–î–æ–ª—ë—Ç",
                   style_function=lambda x: {"color":"#1f77b4","weight":4,"dashArray":"5,5"}).add_to(m2)
    folium.GeoJson(route["geo"]["back_home"], name="–í–æ–∑–≤—Ä–∞—Ç",
                   style_function=lambda x: {"color":"#1f77b4","weight":4,"dashArray":"5,5"}).add_to(m2)

    folium.LayerControl(position="topleft", collapsed=False).add_to(m2)
    st_folium(m2, width="100%", height=560)

    # –º–µ—Ç—Ä–∏–∫–∏
    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞")
    mtr = route["metrics"]
    c1, c2, c3, c4 = st.columns(4)
    c1.metric("–î–ª–∏–Ω–∞, –∫–º",        f"{mtr['length_total_m']/1000:.2f}")
    c2.metric("–í—Ä–µ–º—è, –º–∏–Ω",       f"{mtr['time_total_min']:.1f}")
    c3.metric("–¢–æ–ø–ª–∏–≤–æ, –ª",       f"{mtr['fuel_l']:.1f}")
    c4.metric("–£–¥–æ–±—Ä–µ–Ω–∏–µ, –ª",     f"{mtr['fert_l']:.1f}")
    c5, c6, c7, c8 = st.columns(4)
    c5.metric("–¢—Ä–∞–Ω–∑–∏—Ç, –∫–º",      f"{mtr['length_transit_m']/1000:.2f}")
    c6.metric("–û–±—Ä–∞–±–æ—Ç–∫–∞, –∫–º",    f"{mtr['length_spray_m']/1000:.2f}")
    c7.metric("–ü–ª–æ—â–∞–¥—å –ø–æ–ª—è, –≥–∞", f"{mtr['field_area_ha']:.3f}")
    c8.metric("–ü–æ–∫—Ä—ã—Ç–æ, –≥–∞",      f"{mtr['sprayed_area_ha']:.3f}")

# =============== –õ–û–ì–ò ===============
if st.session_state["build_log"]:
    st.subheader("–õ–æ–≥–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è")
    for line in st.session_state["build_log"]:
        st.text(line)